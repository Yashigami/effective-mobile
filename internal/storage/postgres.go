package storage

import (
	"effective-mobail/internal/config"
	"effective-mobail/internal/model"
	"fmt"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"log"
)

type Storage struct {
	DB *gorm.DB
}

func (s *Storage) SavePerson(p *model.Person) error {
	return s.DB.Create(p).Error // üëà —Ç–µ–ø–µ—Ä—å –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ GORM
}

func InitPostgres(cfg *config.Config) *gorm.DB {
	// –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
	dsn := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%s sslmode=disable", cfg.DBHost, cfg.DBUser, cfg.DBPass, cfg.DBName, cfg.DBPort)

	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatalf("–Ω–µ—É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: %v", err)
	}

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã Person
	err = db.AutoMigrate(&model.Person{})
	if err != nil {
		log.Fatalf("–º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: %v", err)
	}
	log.Println("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∏ –º–∏–≥—Ä–∞—Ü–∏—è")
	return db
}
